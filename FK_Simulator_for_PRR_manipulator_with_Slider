import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider
from mpl_toolkits.mplot3d import Axes3D

# ====== Robot Link Lengths ======
L2 = 4.0  # fixed length of first revolute link
L3 = 3.0  # fixed length of second revolute link


# ====== Forward Kinematics Function ======
def fk(L1, theta1, theta2):
    """
    Forward Kinematics for PRR robot
    L1: prismatic joint along Z
    theta1: first revolute joint (rotation in XY plane)
    theta2: second revolute joint (relative rotation in XY plane)
    """
    # Joint 1 position
    x1 = L2 * np.cos(theta1)
    y1 = L2 * np.sin(theta1)
    z1 = L1

    # End-effector position
    x2 = x1 + L3 * np.cos(theta1 + theta2)
    y2 = y1 + L3 * np.sin(theta1 + theta2)
    z2 = L1

    return (0, 0, L1), (x1, y1, z1), (x2, y2, z2)


# ====== Initial Parameters ======
L1_0 = 2.0  # initial prismatic length in Z
theta1_0 = np.pi / 4  # initial rotation of first revolute
theta2_0 = np.pi / 6  # initial rotation of second revolute

# ====== Plot Setup ======
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
plt.subplots_adjust(left=0.1, bottom=0.35)  # space for sliders

ax.set_xlim(-10, 10)
ax.set_ylim(-10, 10)
ax.set_zlim(0, 10)
ax.set_title("PRR Robot - Forward Kinematics Simulation with Sliders")

# Robot line
line, = ax.plot([], [], [], 'o-', lw=4, color="blue")
end_eff_text = ax.text2D(0.05, 0.95, '', transform=ax.transAxes)


# ====== Initial Plot ======
def update_plot(L1, theta1, theta2):
    p0, p1, p2 = fk(L1, theta1, theta2)
    xs = [0, p0[0], p1[0], p2[0]]
    ys = [0, p0[1], p1[1], p2[1]]
    zs = [0, p0[2], p1[2], p2[2]]

    line.set_data(xs, ys)
    line.set_3d_properties(zs)
    end_eff_text.set_text(f"End-Effector: ({p2[0]:.2f}, {p2[1]:.2f}, {p2[2]:.2f})")
    fig.canvas.draw_idle()


update_plot(L1_0, theta1_0, theta2_0)

# ====== Sliders ======
ax_L1 = plt.axes([0.2, 0.25, 0.65, 0.03])  # Z-prismatic
ax_theta1 = plt.axes([0.2, 0.2, 0.65, 0.03])  # Revolute 1
ax_theta2 = plt.axes([0.2, 0.15, 0.65, 0.03])  # Revolute 2

slider_L1 = Slider(ax_L1, 'L1 (Z)', 0.1, 8, valinit=L1_0)
slider_theta1 = Slider(ax_theta1, 'Theta1 (rad)', -np.pi, np.pi, valinit=theta1_0)
slider_theta2 = Slider(ax_theta2, 'Theta2 (rad)', -np.pi, np.pi, valinit=theta2_0)


def slider_update(val):
    update_plot(slider_L1.val, slider_theta1.val, slider_theta2.val)


slider_L1.on_changed(slider_update)
slider_theta1.on_changed(slider_update)
slider_theta2.on_changed(slider_update)

plt.show()
